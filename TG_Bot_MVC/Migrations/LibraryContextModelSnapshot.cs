// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TG_Bot_MVC;

#nullable disable

namespace TG_Bot_MVC.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TG_Bot_MVC.CorrectSchedule", b =>
                {
                    b.Property<int>("IdCorSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("SerializeDataLessons")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WeekOfScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("IdCorSchedule");

                    b.HasIndex("GroupId");

                    b.HasIndex("WeekOfScheduleId");

                    b.ToTable("CorrectSchedules");
                });

            modelBuilder.Entity("TG_Bot_MVC.DefaultSchedule", b =>
                {
                    b.Property<int>("IdDefSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("SerializeDataLessons")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WeekOfScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("IdDefSchedule");

                    b.HasIndex("GroupId");

                    b.HasIndex("WeekOfScheduleId");

                    b.ToTable("DefaultSchedules");
                });

            modelBuilder.Entity("TG_Bot_MVC.Department", b =>
                {
                    b.Property<int>("IdDepartment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdDepartment");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("TG_Bot_MVC.Group", b =>
                {
                    b.Property<int>("IdGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdGroup");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TG_Bot_MVC.ReplasementLesson", b =>
                {
                    b.Property<int>("IdRepLesson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("SerializeDataLessons")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WeekOfScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("IdRepLesson");

                    b.HasIndex("GroupId");

                    b.HasIndex("WeekOfScheduleId");

                    b.ToTable("ReplasementLessons");
                });

            modelBuilder.Entity("TG_Bot_MVC.Setting", b =>
                {
                    b.Property<int>("IdSetting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("TimeOfLessons")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isMailing")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IdSetting");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("TG_Bot_MVC.Status", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdStatus");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("TG_Bot_MVC.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("SettingId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("UserTGId")
                        .HasColumnType("bigint");

                    b.HasKey("IdUser");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TG_Bot_MVC.WeekOfSchedule", b =>
                {
                    b.Property<int>("IdWeekOfSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("WeekOfScheduleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdWeekOfSchedule");

                    b.ToTable("WeekOfSchedules");
                });

            modelBuilder.Entity("TG_Bot_MVC.CorrectSchedule", b =>
                {
                    b.HasOne("TG_Bot_MVC.Group", "Group")
                        .WithMany("CorrectSchedules")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TG_Bot_MVC.WeekOfSchedule", "WeekOfSchedule")
                        .WithMany("CorrectSchedules")
                        .HasForeignKey("WeekOfScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("WeekOfSchedule");
                });

            modelBuilder.Entity("TG_Bot_MVC.DefaultSchedule", b =>
                {
                    b.HasOne("TG_Bot_MVC.Group", "Group")
                        .WithMany("DefaultSchedules")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TG_Bot_MVC.WeekOfSchedule", "WeekOfSchedule")
                        .WithMany("DefaultSchedules")
                        .HasForeignKey("WeekOfScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("WeekOfSchedule");
                });

            modelBuilder.Entity("TG_Bot_MVC.Group", b =>
                {
                    b.HasOne("TG_Bot_MVC.Department", "Department")
                        .WithMany("Groups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("TG_Bot_MVC.ReplasementLesson", b =>
                {
                    b.HasOne("TG_Bot_MVC.Group", "Group")
                        .WithMany("ReplasementLessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TG_Bot_MVC.WeekOfSchedule", "WeekOfSchedule")
                        .WithMany("ReplasementLessons")
                        .HasForeignKey("WeekOfScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("WeekOfSchedule");
                });

            modelBuilder.Entity("TG_Bot_MVC.Setting", b =>
                {
                    b.HasOne("TG_Bot_MVC.Group", "Group")
                        .WithMany("Settings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TG_Bot_MVC.User", "User")
                        .WithOne("Setting")
                        .HasForeignKey("TG_Bot_MVC.Setting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TG_Bot_MVC.User", b =>
                {
                    b.HasOne("TG_Bot_MVC.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TG_Bot_MVC.Department", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("TG_Bot_MVC.Group", b =>
                {
                    b.Navigation("CorrectSchedules");

                    b.Navigation("DefaultSchedules");

                    b.Navigation("ReplasementLessons");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("TG_Bot_MVC.Status", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TG_Bot_MVC.User", b =>
                {
                    b.Navigation("Setting")
                        .IsRequired();
                });

            modelBuilder.Entity("TG_Bot_MVC.WeekOfSchedule", b =>
                {
                    b.Navigation("CorrectSchedules");

                    b.Navigation("DefaultSchedules");

                    b.Navigation("ReplasementLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
